# THIS CODE CALCULATES THE LOCAL RMSD AROUND THE MUTATION SITE

def cluster_zone():

	import sys

	# FUNCTION TO READ THE 10A AROUND THE MUTATION FOR A GIVEN MUTATION

	f = open("{}".format(sys.argv[1]),"r")	# CLUSTER FILE
	ft = f.readlines()
	f.close()

	g = open("{}".format(sys.argv[2]),"r")	# CLUSTAL GLOBAL RMSD FILE
	gt = g.readlines()
	g.close()

	d = dict()
	k = 0
	while k < len(gt):
		#print("{} of {}".format(k,len(gt)))
		gt1 = gt[k].split()
		t1 = gt1[0].strip("\n")	# KEY

		wt = gt1[1].strip("\n")
		mut = gt1[2].strip("\n")

		k1 = 0
		ft1 = ft[k1].split()
		t2 = ft1[0].strip("\n")
		if len(ft1) > 2:
			t3 = ft1[2].strip("('|',|\n")
		else:
			t3 = "NA"
		
		while t2 != "#" or t3 != wt:
			k1 = k1 + 1
			if k1 > len(ft):
				print("ERROR 1")
				quit()
			ft1 = ft[k1].split()
			t2 = ft1[0].strip("\n")
			if len(ft1) > 2:
				t3 = ft1[2].strip("('|',")
			else:
				t3 = "NA"
		
		k1 = k1 + 1
		ft1 = ft[k1].split()
		t2 = ft1[0].strip("('|',|\n")
		while t2 != mut:
			k1 = k1 + 1
			ft1 = ft[k1].split()
			t2 = ft1[0].strip("('|',|\n")
			if t2 == "#" or (k1+1) > len(ft):
				print("ERROR2")
				quit()
	
		# DETERMING THE MUTANT AND WILDTYPE 10A ZONE
		wtzone = ft1[(len(ft1)-2)].strip("'|',|\n")
		mutzone = ft1[(len(ft1)-1)].strip("'|')|\n")

		if wtzone != "NOT_FOUND" and mutzone != "NOT_FOUND":
			d["{}".format(t1)] = [wtzone]
			d["{}".format(t1)].append(mutzone)

		k = k + 1

	return(d)
	#a = d["2"][0].split(",")
	#print(sorted(a, key=int))

def average(arg):
	# TO AVERAGE THE VALUES IN THE LIST arg

	value = 0.0
	for x in range(0,len(arg)):
		value = value + float(arg[x])
	
	value = value / len(arg)
	value = round(value,3)
	return(value)

def local_rmsd():

	# THIS CODE READS THE RMSD PER RESIDUE FILE GENERATED BY CAPRI-FIT TO CALCULATE THE LOCAL RMMSD

	import sys

	path = "/data/capri_fit/capri_fit_high_res_struct/redo/overlay_images"
	
	print("FORMING A DICTIONARY OF 10A ZONE AROUND EACH MUTATION ...")
	cs = cluster_zone()
	print("DONE")

	g = open("{}".format(sys.argv[2]),"r")	# CLUSTAL GLOBAL RMSD FILE
	gt = g.readlines()
	g.close()

	h = open("local_rmsd_clustal.out","w")
	h1 = open("local_rmsd_clustal_with_mutpos.txt","w")

	k = 1
	while k < len(gt):
		gt1 = gt[k].split()
		t1 = gt1[0].strip("\n")
		wt = gt1[1].strip("\n")
		mut = gt1[2].strip("\n")
		print("{} of {} with wildtype {} and mutant {} ".format(t1,len(gt),wt,mut))
		
		try:
			f = open("{}/{}.out".format(path,t1),"r")
			ft = f.readlines()
			f.close()
			
			k1 = 0
			ft1 = ft[k1].split()
			t2 = ft1[0].strip("\n")
			while t2 != "DATARMS":
				k1 = k1 + 1
				ft1 = ft[k1].split()
				t2 = ft1[0].strip("\n")

			listwt = cs["{}".format(t1)][0].split(",")
			mutpos = listwt[0]
			listwt = sorted(listwt, key=int)
			listmut = cs["{}".format(t1)][1].split(",")
			listmut = sorted(listmut, key=int)

			# FOR WILDTYPE

			list1 = []
			k2 = 0
			while k2 < len(listwt):
				pos = listwt[k2]
				if pos != mutpos:
					ft1 = ft[k1].split()
					t2 = ft1[2]
					while t2 != pos:
						k1 = k1 + 1
						if k1 > len(ft):
							print("ERROR 3")
							quit()
						ft1 = ft[k1].split()
						t2 = ft1[2]
					rmsd = ft1[9]
					list1.append(rmsd)
				k2 = k2 + 1
			
			avg = average(list1)
			h.write("{}	{}	{}	{}".format(t1,wt,mut,avg))
			h.write("\n")
			h1.write("{}	{}	{}	{}	{}".format(t1,wt,mut,pos,avg))
			h1.write("\n")
		except:
			print("{} NOT FOUND".format(t1))
		
		k = k + 1

	h.close()
	h.close()
				
local_rmsd()


		
	














		
		
		

